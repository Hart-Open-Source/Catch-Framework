{
    "queries": {
        "LinuxAuthBanner": {
            "query": "select value from augeas where path = '/etc/ssh/sshd_config' and label = 'Banner';",
            "description": "Get the banner displayed to users who try to access the SSH service.",
            "specifications": ["Access to operating systems shall be controlled by a secure log-on procedure."],
            "implementations": ["Display a general notice warning that the computer shall only be accessed by authorized users."],
            "matches": ["(.*)"],
            "success_conditions": [".*\\S.*"],
            "hitrust_controls": ["CR_01.p.lvl1.1"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        },
        "LinuxFailedAuthLimit": {
            "query": "select value from augeas where node = '/files/etc/pam.d/common-auth/4/argument[2]';",
            "description": "Get the maximum number of failed login attempts from PAM (/etc/pam.d/common-auth) for Linux, using 'deny' argument for pam_tally2.so line.",
            "specifications": ["Access to operating systems shall be controlled by a secure log-on procedure.", "Access to operating systems shall be controlled by a secure log-on procedure."],
            "implementations": ["Limit the number of unsuccessful log-on attempts allowed to six (6) attempts.", "Limit the number of unsuccessful log-on attempts allowed to three (3) attempts."],
            "matches": ["(\\d+)", "(\\d+)"],
            "success_conditions": ["[1-6]", "[1-3]"],
            "hitrust_controls": ["CR_01.p.lvl1.2", "CR_01.p.lvl2.1"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        },
        "LinuxAuthLogSize": {
            "query": "select size from file where path = '/var/log/auth.log';",
            "description": "Get the authentication log file size for Linux.",
            "specifications": ["Access to operating systems shall be controlled by a secure log-on procedure.", "Audit logs recording user activities, exceptions, and information security events shall be produced and kept for an agreed period to assist in future investigations and access control monitoring.", "Procedures for monitoring use of information processing systems and facilities shall be established to check for use and effectiveness of implemented controls."],
            "implementations": ["Enforce recording of unsuccessful and successful login attempts.", "Information systems processing covered information shall create a secure audit record each time a user accesses, creates, updates, or archives covered information via the system.", "Monitoring of authorized and unauthorized access."],
            "matches": ["(\\d+)", "(\\d+)", "(\\d+)"],
            "success_conditions": ["^[1-9][0-9]*$", "^[1-9][0-9]*$", "^[1-9][0-9]*$"],
            "hitrust_controls": ["CR_01.p.lvl1.3", "CR_09.aa.lvl1.1", "CR_09.ab.lvl1.1"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        },
        "LinuxAccountLockoutTime": {
            "query": "select value from augeas where node = '/files/etc/pam.d/common-auth/4/argument[3]';",
            "description": "Get the maximum number of failed login attempts from PAM (/etc/pam.d/common-auth) for Linux, using 'unlock_time' argument for pam_tally2.so line.",
            "specifications": ["Access to operating systems shall be controlled by a secure log-on procedure."],
            "implementations": ["Force a time delay of thirty (30) minutes before further log-on attempts are allowed or reject any further attempts without specific authorization from an administrator."],
            "matches": ["(\\d+)"],
            "success_conditions": ["1800"],
            "hitrust_controls": ["CR_01.p.lvl1.4"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        },
        "LinuxNonRootUIDs": {
            "query": "select uid from processes where uid between '500' and '32000';",
            "description": "Get UIDs and check if there are non-root (unprivileged) processes running. This implies the principle of least privilege is being followed.",
            "specifications": ["All users shall have a unique identifier for their personal use only.", "Systems for managing passwords shall be interactive and shall ensure quality passwords.", "The use of utility programs that might be capable of overriding system and application controls shall be restricted and tightly controlled."],
            "implementations": ["User IDs shall be used to trace activities to the responsible individual; and regular user activities shall not be performed from privileged accounts.", "Require the use of individual user IDs and passwords to maintain accountability.", "The use of system utilities shall be controlled by implementing use of identification, authentication, and authorization procedures for system utilities."],
            "matches": ["(\\d+)", "(\\d+)", "(\\d+)"],
            "success_conditions": ["(\\d+)", "(\\d+)", "(\\d+)"],
            "hitrust_controls": ["CR_01.q.lvl1.1", "CR_01.r.lvl1.1", "CR_01.s.lvl1.1"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        },
        "LinuxSSHIdleSessionTimeout": {
            "query": "select (select value from augeas where node = '/files/etc/ssh/sshd_config/ClientAliveInterval') * (select value from augeas where node = '/files/etc/ssh/sshd_config/ClientAliveCountMax') as value;",
            "description": "Get SSH server idle session timeout value for Linux.",
            "specifications": ["Inactive sessions shall shut down after a defined period of inactivity."],
            "implementations": ["A time-out system should close network sessions after thirty (30) minutes of inactivity. The system shall require the user to reestablish access using appropriate identification and authentication procedures."],
            "matches": ["(\\d+)"],
            "success_conditions": ["1800"],
            "hitrust_controls": ["CR_01.t.lvl1.1"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        },
        "LinuxContainerCheck": {
            "query": "select size from file where path = '/.dockerenv';",
            "description": "Get the size of the /.dockerenv file if it exists, to determine whether the system is a docker container.",
            "specifications": ["Sensitive systems shall have a dedicated and isolated computing environment."],
            "implementations": ["The sensitive application system shall run on a dedicated computer, or only share resources with trusted applications systems."],
            "matches": ["(\\d+)"],
            "success_conditions": ["(\\d+)"],
            "hitrust_controls": ["CR_01.w.lvl2.1"],
            "platform": "linux",
            "shard": 100,
            "snapshot": true,
            "interval": 30
        }
    }
}